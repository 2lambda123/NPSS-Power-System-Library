// ****************************************************************************
// * NASA Glenn Research Center
// * 21000 Brookpark Rd
// * Cleveland, OH 44135
// * Jeffrey Csank, David Sadey, Tom Lavelle
// * April 26, 2018
// ****************************************************************************

//#include <InterpIncludes.ncp>
class eCablePQ extends ElementI {
	
	//------------------------------------------------------------
	//     ******* DOCUMENTATION *******
	//------------------------------------------------------------
	
	title = "";
	
	description = isA() + " Determines power for the cable";
	
	usageNotes = isA() + "- NOTE TO USERS: This file....";
	
	background = "";
	
	//------------------------------------------------------------
	//     ******* SETUP VARIABLES ********
	//------------------------------------------------------------
	
	real SpecificAmperage {
		value = 170.; IOstatus="input"; //units=;
		description = "Amps to Weight/length ratio for the cable";
	}
	
	real CableLength {
		value = 28.3; IOstatus="input"; //units=;
		description = "One way line length (m)";
	}
	
	real LineResistance {
		value = 0.0; IOstatus="input"; //units=Amps;
		description = "Cable Resistance";
	}
	
	real LineReactance {
		value = 0.0; IOstatus="input"; //units=Amps;
		description = "Cable Reactance";
	}
	
	real Mass {
		value=0; IOstatus="output"; //units="kg";
		description = "Mass output of the cable";
	}
	
	real Loss_r {
		value = 0; IOstatus="output"; units="W";
		description = "Cable Loss";
	}
	
	real Loss_j {
		value = 0; IOstatus="output"; units="W";
		description = "Cable Loss";
	}
	
	real Vdrop_r {
		value = 0; IOstatus="output"; units="W";
		description = "Real Voltage Drop across the line";
	}
	
	real Vdrop_j {
		value = 0; IOstatus="output"; units="W";
		description = "Real Voltage Drop across the line";
	}
	
	real Vload_r {
		value = 0; IOstatus="output"; units="W";
		description = "Real Voltage Drop across the line";
	}
	
	real Vload_j {
		value = 0; IOstatus="output"; units="W";
		description = "Real Voltage Drop across the line";
	}
	
	
	real SupplyVoltage {
		value = 0; IOstatus="output"; units="W";
		description = "Supply Side Voltage";
	}
	
	real Impedance{
		value = 0; IOstatus="output"; //units="ohms";
		description = "Impedance";
	}
	
	real ImpedanceAngle{
		value = 0; IOstatus="output"; units="deg";
		description = "Impedance Angle";
	}
	
	
	//------------------------------------------------------------
	// ****** SETUP PORTS, FLOW STATIONS, SOCKETS, TABLES ********
	//------------------------------------------------------------	
	ElectricPort EP_O {
		description = "Electric port";
	}
	string EPortRef;
	
	ElectricPort EP_I {
		description = "Electric Port";
	}
	
	//------------------------------------------------------------
	//   ******* PERFORM ENGINEERING CALCULATIONS *******
	//------------------------------------------------------------
	Option switchDes {
		allowedValues = { "DESIGN", "OFFDESIGN" } ;
		description = "Determines if the element is in design or off-design mode";
		rewritableValues = FALSE;
		trigger=FALSE;
	}
	
	void calculateI() {

		
		// Determine cable impedance
		Impedance = sqrt(LineResistance**2 + (LineReactance*(EP_I.frequency/60))**2);
		ImpedanceAngle = atan2((LineReactance*(EP_I.frequency/60)),LineResistance)*180/PI;
		
		// determine voltage drop over the line		
		Vdrop_r = EP_I.I.mag * Impedance * cos((EP_I.I.phaseDeg + ImpedanceAngle)*PI/180); 
		Vdrop_j = EP_I.I.mag * Impedance * sin((EP_I.I.phaseDeg + ImpedanceAngle)*PI/180); 
		
		// calculate losses (real and imaginary)
		Loss_r = 3 * EP_I.I.mag**2 * LineResistance / 1000.;
		Loss_j = 3 * EP_I.I.mag**2 * LineReactance*EP_I.frequency/60 / 1000.;
		
		// Compute load voltage
		Vload_r=EP_I.V.r - Vdrop_r;
		Vload_j=EP_I.V.j - Vdrop_j; 
		
		//cout << "Vimag " << EP_I.Vimag() << " Vdrop_j " << Vdrop_j << endl;
		
		real Voltage = sqrt(Vload_r**2 + Vload_j ** 2);
		real VoltageAngle = atan2(Vload_j,Vload_r)*180/PI;
		
		//cout << "Vload j " << Vload_j << " Vload_r " << Vload_r << " angle " << atan2(Vload_j,Vload_r)*180/PI << endl;
		//cout << VoltageAngle << endl;
		
		if (switchDes=="DESIGN"){
			/***************************
			On-Design
			***************************/
			// in on design, calculate the mass of the cable
			Mass=EP_I.I.mag / SpecificAmperage * CableLength * 3;
		}
		
		EP_O.setIVphaseDeg(EP_I.I.mag,EP_I.I.phaseDeg,Voltage,VoltageAngle);
		EP_O.frequency=EP_I.frequency;
	}
}
