/***
 -------------------------------------------------------------------------------
 |                                                                             |
 | NASA Glenn Research Center                                                  |
 | 21000 Brookpark Rd 		                                                     |
 | Cleveland, OH 44135 	                                                       |
 |                                                                             |
 | File Name:     Inverter.int                                                 |
 | Author(s):     George Thomas, Jeffrey Csank, David Sadey, Tom Lavelle       |
 | Date(s):       March 2019	                                                 |
 |                                                                             |
 -------------------------------------------------------------------------------
***/

#ifndef __INVERTER__
#define __INVERTER__

class Inverter extends Element {
  
  //----------------------------
  // ****** DOCUMENTATION ******
  //----------------------------  
  
  // title = "";

  description = isA() + " Determines power for an inverter.";

  // usageNotes = isA() + "- NOTE TO USERS: This file....";
  // background = "";
  
  //------------------------------
  // ****** SETUP VARIABLES ******
  //------------------------------
  
  ComplexNumber Sac;
  ComplexNumber Idc;
  ComplexNumber Iac;
  ComplexNumber Vac;
  ComplexNumber Vdc;
  
  real eff {
    value = 1.0; IOstatus = "input"; units = "none";
    description = "Efficiency of the inverter.";
  }

  real effBase {
    value = 1.;  IOstatus = "output"; units = "none";
    description = "Adiabatic efficiency.  Calculated and set by S_map socket during off design.";
  }

  real effDes {
    value = 1.;  IOstatus = "input"; units = "none";
    description = "Adiabatic efficiency at design point.";
  }
  
  real frequency {
    value = 60.; IOstatus = "input"; units = "Hz"; // [hertz]
    description = "Frequency of AC output power.";
  }

  real pwrDes {
    value = 1.;  IOstatus = "input";  units = "kW"; // [kilowatts]
    description = "Output power at design.";
  }

  real pwrOut {
    value = 1.;  IOstatus = "output";  units = "kW"; // [kilowatts]
    description = "Output power.";
  }
  
  real Vimag {
    value = 1.; IOstatus = "input"; units = "V"; // [volts]
    description = "Rectifier voltage (imaginary).";
  }

  real Vreal {
    value = 1000.; IOstatus = "input"; units = "V"; // [volts]
    description = "Rectifier voltage (real).";
  }
  
  real SpecificPower {
    value = 13; IOstatus = "input"; units = "none"; // [kW / kg]
    description = "Power to weight ratio for the component.";
  }

  real Mass {
    value = 1.; IOstatus = "output"; units = "kg"; // [kilograms]
    description = "Component mass.";
  }

  real Loss_j {
    value = 0; IOstatus = "output"; units = "kW"; // [kilowatts]
    description = "Component loss.";
  }

  real Loss_r {
    value = 0; IOstatus = "output"; units = "kW"; // [kilowatts]
    description = "Component loss.";
  }

  real Q_heat {
    value = 0; IOstatus = "output"; units = "Btu/sec"; // [BTUs / sec]
    description = "Power dissipation at current time.";
  }

  //------------------------------------
  // ****** OPTION VARIABLE SETUP ******
  //------------------------------------

  Option switchDes {
    allowedValues = { "DESIGN", "OFFDESIGN" };
    description = "Determines if the element is in design or off-design mode.";
    rewritableValues = FALSE;
  }

  Option switchThermPort {
    allowedValues = { "TRUE", "FALSE" };
    description = "Determines if component needs thermal port.";
    rewritableValues = FALSE;  // enables converter optimization
    trigger = TRUE;
  }
  
  //----------------------------------------------------------
  // ****** SETUP PORTS, FLOW STATIONS, SOCKETS, TABLES ******
  //----------------------------------------------------------  

  /* ELECTRICAL PORTS */

  ElectricInputPort EP_I {
    description = "Electric input port.";
  }

  ElectricOutputPort EP_O {
    description = "Electric output port.";
  }

  /* SOCKETS */

  Socket S_map {
    allowedValues = { "effBase" }
    description = "Socket to calculate motor map performance.";
    socketType = "INVERTER_RECTIFIER_MAP";
  }

  Socket S_eThermMass {
    allowedValues = { "Q_heat", "Mass" }
    description = "Thermal mass socket.";
    socketType = "EThermalMass";
  }

  //-----------------------------------------------------
  // ******  ADD SOLVER INDEPENDENTS & DEPENDENTS  ******
  //-----------------------------------------------------

  Independent ind_Vreal { 
    varName = "Vreal"; 
    autoSetup = TRUE;
    indepRef = "10000";
    description = "Varies the real component of the inverter voltage.";
  }
  
  Independent ind_Vimag { 
    varName = "Vimag"; 
    autoSetup = TRUE;
    indepRef = "10000";
    description = "Varies the imaginary component of the inverter voltage.";
  }
  
  Dependent dep_Power {
    eq_lhs = "EP_O.S.rRMS";
    eq_rhs = "EP_I.S.rRMS * eff";
    autoSetup = TRUE;
  }
  
  Dependent dep_phase {
    eq_rhs = "0";
    eq_lhs = "EP_O.V.phaseDeg";
    autoSetup = TRUE;
  }

  //------------------------------------------------------------
  // ******* VARIABLE CHANGED METHODOLOGY *******
  //------------------------------------------------------------

  void variableChanged(string name, any oldVal) {
    if (name == "switchThermPort") { 
      if (switchThermPort == "TRUE") {
        create("", "ThermalInputPort", "Q_I" );
      }
    }
    if (name == "switchDes") {
      if (switchDes == OFFDESIGN) {
        effDes.IOstatus = "output";
      }
    }
  }
  
  //-----------------------------------------------
  // ****** PERFORM ENGINEERING CALCULATIONS ******
  //-----------------------------------------------
  
  void calculate() {

    pwrOut = EP_O.S.rRMS;
    
    if (switchDes == "DESIGN" ) {

      // handle case guessed design power is zero.
      if (abs(pwrOut) < 1e-4) { pwrOut = 1e-4; }
      pwrDes = pwrOut;

      // compute mass based on assumed specific power
      // both mass and losses are based on output power (power sent)
      Mass = pwrOut / SpecificPower;
    }

    // set efficiency value
    if(!S_map.isEmpty()) {
      S_map.execute();
    } else {
      effBase = effDes;
    }
    eff = effBase;
    
    Loss_r = EP_I.S.r - EP_O.S.r;
    Loss_j = EP_I.S.j - EP_O.S.j;

    if (switchThermPort=="TRUE") {
      real KW_PER_BTU_PER_SEC = 1.05505585;
      Q_heat = sqrt(Loss_r**2 + Loss_j**2);
      Q_heat /= KW_PER_BTU_PER_SEC;

      // run the thermal mass model.
      if ( !S_eThermMass.isEmpty() ) {
        S_eThermMass.execute();
      }
    }
  }
  
  
  
  //-------------------------------
  // ****** PREPASS FUNCTION ******
  //-------------------------------
  void prePass() {
    EP_O.frequency = frequency;
    EP_O.setIVRMS(EP_O.I.r, EP_O.I.j, Vreal, Vimag);
    EP_I.setIVRMS(EP_I.I.r, EP_I.I.j, EP_O.V.mag * sqrt(2), 0);
  }
}
#endif
