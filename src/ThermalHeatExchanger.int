/*******************************************************************************
© Copyright 2003. The U.S. Government, as Represented by the Administrator of
the National Aeronautics and Space Administration (NASA). All rights reserved.
Includes content licensed from the U.S. Government, National Aeronautics and
Space Administration under United States Copyright Registration Numbers
V3503D364 and V3482D344.
© 2008-2015 NPSS® Consortium, www.NPSSConsortium.org/AllRightsReserved
*******************************************************************************/

/*******************************************************************************
NPSS® software and related documentation is export controlled with an Export
Control Classification Number(ECCN) of 9D991, controlled for Anti-Terrorism
reasons, under U.S. Export Administration Regulations 15 CFR 730-774. It may
not be transferred to a country checked under anti-terrorism on the Commerce
Country Chart structure or to foreign nationals of those countries in the U.S.
or abroad without first obtaining a license from the Bureau of Industry and
Security, United States Department of Commerce. Violations are punishable by
fine, imprisonment, or both.
*******************************************************************************/
//
// For further information contact support@wolverine-ventures.com
//

#ifndef __THERMALHEATEXCHANGERELEMENT__
#define __THERMALHEATEXCHANGERELEMENT__

#include <InterpIncludes.ncp>
// Define AU table
// #include <HEXMap.int>

class ThermalHeatExchanger extends Element {

  //------------------------------------------------------------
  // ******* DOCUMENTATION *******
  //------------------------------------------------------------

  title = "";

  description = isA() + " models thermal energy transfer between two parallel streams using either
an effectiveness or heat flow.  Pressure losses may be applied to each stream.";



  usageNotes = isA() +
"

- Energy exchanged between the two streams is defined by an AU map defined in
the S_map socket along with dPqP1 and dPqP2.

- The calculations are based on 'Compact Heat Exchangers. Third Edition' by
W. M. Kays and A. L. London, The National Press, 1984.
";

 //------------------------------------------------------------
 // ******* SETUP VARIABLES********
 //------------------------------------------------------------

  // Real variables
  real AU {
    value = 0;  IOstatus = OUTPUT;  units = BTU_PER_SEC_R;
    description = "Area * overall thermal conductance";
  }
  real cap1 {
    value = 0;  IOstatus = OUTPUT;  units = BTU_PER_SEC_R;
    description = "Capacity of flow stream 1 (W*Cp)";
  }
  real cap2 {
    value = 0;  IOstatus = OUTPUT;  units = BTU_PER_SEC_R;
    description = "Capacity of flow stream 2 (W*Cp)";
  }
  real capMin {
    value = 0;  IOstatus = OUTPUT;  units = BTU_PER_SEC_R;
    description = "Minimum of the two streams capacities";
  }
  real CR {
    value = 0;  IOstatus = OUTPUT;  units = NONE;
    description = "cpacitance ratio";
  }
  real dPqP1 {
    value = 0;  IOstatus = INPUT;  units = NONE;
    description = "Pressure loss in stream 1";
  }
  real dPqP1Des {
    value = 0;  IOstatus = INPUT;  units = NONE;
    description = "Design pressure loss in stream 1";
  }
  real dPqP1_dmd {
    value = 0;  IOstatus = INPUT;  units = NONE;
    description = "Normalized pressure loss 1 (used to temporarily store values returned from the pressure loss sockets)";
  }
  real dPqP2Des {
    value = 0;  IOstatus = INPUT;  units = NONE;
    description = "Design pressure loss in stream 1";
  }
  real dPqP2_dmd {
    value = 0;  IOstatus = INPUT;  units = NONE;
    description = "Normalized pressure loss 2 (used to temporarily store values returned from the pressure loss sockets)";
  }
  real dPqP2{
    value = 0;  IOstatus = INPUT;  units = NONE;
    description = "Pressure loss in stream2";
  }
  real effect{
    value = 0;  IOstatus = OUTPUT;  units = NONE;
    description = "Heat transfer effectiveness";
  }
  real effectDes{
    value = 1.0;  IOstatus = INPUT;  units = NONE;
    description = "Heat transfer effectiveness at design point";
  }
  real effect_dmd{
    value = 0;  IOstatus = INPUT;  units = NONE;
    description = "Heat transfer effectiveness(used to temporarily store values returned from the AU sockets)";
  }
  real NTU{
    value = 0;  IOstatus = OUTPUT;  units = NONE;
    description = "transfer units";
  }
   real Q {
    value = 0;  IOstatus = OUTPUT;  units = BTU_PER_SEC;
    description = "Heat flow from one side to another (positive when energy flows from stream 1 to stream 2";
   }
   real Q_in {
    value = 0;  IOstatus = OUTPUT;  units = BTU_PER_SEC;
    description = "Input value of Q";
   }
   real Q_dmd {
    value = 0;  IOstatus = OUTPUT;  units = BTU_PER_SEC;
    description = "Demand vale of Q from customer socket";
   }
   real weight {
    value = 0;  IOstatus = OUTPUT;  units = LBM;
    description = "Heat exchanger weight";
   }

   // Option variables
  Option switchDes {
     allowedValues = { DESIGN, OFFDESIGN }
     description = "Design/Offdesign switch";
     rewritableValues = FALSE;  // Enables converter optimization.
  }

  Option switchQcalc {
    allowedValues = { "EFFECT", "Q" }
    description = "Determines if the heat transfer rate is input or calculated from an effectiveness";
    rewritableValues = FALSE;
  }

  Option switchQ{
    allowedValues = { "INPUT", "OFF", "CALCULATE", "CUSTOM", "AU" }
    description = "Determines if the heat transfer rate is input or calculated from an effectiveness";
    rewritableValues = FALSE;
  }

  //------------------------------------------------------------
  // ****** SETUP PORTS, FLOW STATIONS, SOCKETS, TABLES ********
  //------------------------------------------------------------

  // FLUID PORTS

  FluidInputPort Fl_I1 {
    description = "Fluid input port 1" ;
  }
  FluidInputPort Fl_I2 {
    description = "Fluid input port 2" ;
  }
  FluidOutputPort Fl_O1 {
    description = "Fluid output port 1" ;
  }
  FluidOutputPort Fl_O2 {
    description = "Fluid output port 2" ;
  }

  // FUEL PORTS

  // BLEED PORTS

  // THERMAL PORTS

  // MECHANICAL PORTS

  // FLOW STATIONS
  FlowStation Fl_dP {
    description = "Temporary FlowStation used to pass data to the pressure loss Subelements.  Used because the dPnorm subelements expect to reference the incoming conditions in Fl_I.";
  }

  // SOCKETS
  Socket S_map {
    allowedValues = { "effect_dmd"};
    description = "Effectiveness calculation";
    socketType = "ThermalHeatExchangerMap" ;
  }

  //------------------------------------------------------------
  // ******* SOLVER SETUP *******
  //------------------------------------------------------------

  //------------------------------------------------------------
  // ****** ADD SOLVER INDEPENDENTS & DEPENDENT ******
  //------------------------------------------------------------

  //------------------------------------------------------------
  // ******* VARIABLE CHANGED METHODOLOGY *******
  //------------------------------------------------------------
  void variableChanged( string name, any oldVal ) {
  }



  //------------------------------------------------------------------
  // Calculations
  //------------------------------------------------------------------

  void calculate() {

    //------------------------------------------------------------------
    // Copy entrance conditions to exit
    //------------------------------------------------------------------
    Fl_O1.copyFlow( "Fl_I1" );
    Fl_O2.copyFlow( "Fl_I2" );

    //------------------------------------------------------------------
    // Calculate the fluid capacity rates (flow x Cp)
    //------------------------------------------------------------------
    cap1 = Fl_I1.W * Fl_I1.Cpt;
    cap2 = Fl_I2.W * Fl_I2.Cpt;

    //------------------------------------------------------------------
    // Determine which side has the minimum and maximum capacity
    //------------------------------------------------------------------
    if ( cap2 >= cap1 ) {
      capMin = cap1;
      CR = capMin/cap2;
    }
    else {
      capMin = cap2 ;
      CR = capMin/cap1;
    }

    //------------------------------------------------------------------
    // Calculate the pressure loss on both sides of the HX
    //------------------------------------------------------------------
    if( !S_map.isEmpty() ) {
      S_map.execute();
      effect = effect_dmd;
      dPqP1 = dPqP1_dmd;
      dPqP2 = dPqP2_dmd;
    }

    real ToutCold;

    //------------------------------------------------------------------
    // If T2 > T1 then stream 2 is the hot side
    //------------------------------------------------------------------
    if ( Fl_I2.Tt > Fl_I1.Tt ) {

	  //------------------------------------------------------------------------
	  // Determine cold side temp (TO1) from effectiveness equation
	  //------------------------------------------------------------------------
	  ToutCold = Fl_I1.Tt + effect *( Fl_I2.Tt - Fl_I1.Tt )*( capMin / cap1 );

	  //------------------------------------------------------------------------
	  // Set the cold side conditions based on the temp and pressure loss
	  //------------------------------------------------------------------------
	  Fl_O1.setTotalTP( ToutCold, Fl_O1.Pt * ( 1 - dPqP1 ));

	  //------------------------------------------------------------------------
	  // Set the hot side conditions based on an energy balance and
	  // pressure loss
	  //------------------------------------------------------------------------
      Fl_O2.setTotal_hP( Fl_I2.ht +( Fl_I1.ht - Fl_O1.ht )* Fl_I1.W /
								Fl_I2.W, Fl_O2.Pt * ( 1 - dPqP2 ));

    }

    //------------------------------------------------------------------
    // Stream 1 is the hot side
    //------------------------------------------------------------------
    else {
	  //------------------------------------------------------------------------
	  // Determine cold side temp (TO2) from effectiveness equation
	  //------------------------------------------------------------------------
	  ToutCold = Fl_I2.Tt + effect *( Fl_I1.Tt - Fl_I2.Tt )*( capMin / cap2 );

	  //------------------------------------------------------------------------
	  // Set the cold side conditions based on the temp and pressure loss
	  //------------------------------------------------------------------------
	  Fl_O2.setTotalTP( ToutCold, Fl_O2.Pt * ( 1 - dPqP2 ));

	  //------------------------------------------------------------------------
	  // Set the hot side conditions based on an energy balance and
	  // pressure loss
	  //-------------------------------------------------------------------------
      Fl_O1.setTotal_hP( Fl_I1.ht +( Fl_I2.ht - Fl_O2.ht ) * Fl_I2.W /
								Fl_I1.W, Fl_O1.Pt * ( 1 - dPqP1 ));

    }

    //------------------------------------------------------------------
    // Calculate the Q
    //------------------------------------------------------------------

    Q = ( Fl_O2.ht - Fl_I2.ht )* Fl_I2.W;
    if(switchDes == DESIGN) {
      weight = (Q * 0.5207 + 1.863)*2.2;
    }

  }
}

#endif
