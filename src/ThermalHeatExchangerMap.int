/***
 -------------------------------------------------------------------------------
 |                                                                             |
 | NASA Glenn Research Center                                                  |
 | 21000 Brookpark Rd 		                                                     |
 | Cleveland, OH 44135 	                                                       |
 |                                                                             |
 | File Name:     ThermalHeatExchangerMap.int                                  |
 | Date(s):       May 2020                                                     |
 |                                                                             |
 -------------------------------------------------------------------------------
***/

#ifndef __THERMAL_HEAT_EXCHANGER_MAP__
#define __THERMAL_HEAT_EXCHANGER_MAP__

// #include <InterpIncludes.ncp>
extern real CR;
extern real dPqP1Des;
extern real dPqP1_dmd;
extern real dPqP2Des;
extern real dPqP2_dmd;
extern real effectDes;
extern real effect_dmd;
extern real AU;
extern real NTU;

class ThermalHeatExchangerMap extends Subelement {
  real dPqP1Map {
    value = 1.;  IOstatus = OUTPUT; units = NONE;
    description = "Map pressure loss in stream 1.";
  }
  real dPqP1MapDes {
    value = 1.;  IOstatus = OUTPUT; units = NONE;
    description = "Map design pressure loss in stream 1.";
  }

  real dPqP2Map {
    value = 1.;  IOstatus = OUTPUT; units = NONE;
    description = "Map pressure loss in stream 2.";
  }
  real dPqP2MapDes {
    value = 1.;  IOstatus = OUTPUT; units = NONE;
    description = "Map design pressure loss in stream 2.";
  }

  real effectMap {
    value = 1.;  IOstatus = OUTPUT; units = NONE;
    description = "Effectiveness map value.";
  }
  real effectMapDes {
    value = 1;  IOstatus = OUTPUT;  units = NONE;
    description = "Design Effectiveness on map." +
    " Returned from unscaled map TB_eff at trqMapDes and NmapDes.";
  }

  real s_dPqP1 {
    value = 1.;  IOstatus = OUTPUT;  units = NONE;
    description = "Pressure loss stream 1 map scalar. " +
    "Relates actual design pressure loss to map design pressure loss (dPqP1Des / dPqP1MapDes).";
  }
  real s_dPqP2 {
    value = 1.;  IOstatus = OUTPUT;  units = NONE;
    description = "Pressure loss stream 2 map scalar. " +
    "Relates actual design pressure loss to map design pressure loss (dPqP2Des / dPqP2MapDes).";
  }
  real s_effect {
    value = 1.;  IOstatus = OUTPUT;  units = NONE;
    description = "Effectiveness map scalar. " +
    "Relates actual design effectiveness to map design effectiveness (effectDes / effectMapDes).";
  }

  real s_W1 {
    value = 1.;  IOstatus = OUTPUT;  units = NONE;
    description = "Mass flow 1 map scalar. " +
    "Relates actual design mass flow 1 to map design mass flow 1 (W1Des / W1MapDes).";
  }

  real s_W2 {
    value = 1.;  IOstatus = OUTPUT;  units = NONE;
    description = "Mass flow 2 map scalar. " +
    "Relates actual design mass flow 2 to map design mass flow 2 (W2Des / W2MapDes).";
  }
  real W1Map {
    value = 1.;  IOstatus = OUTPUT;  units = LBM_PER_SEC;
    description = "Map mass flow 1. ";
  }

  real W2Map {
    value = 1.;  IOstatus = OUTPUT;  units = LBM_PER_SEC;
    description = "Map mass flow 2. ";
  }
  real W1MapDes {
    value = 1.;  IOstatus = OUTPUT;  units = LBM_PER_SEC;
    description = "Map design mass flow 1. ";
  }

  real W2MapDes {
    value = 1.;  IOstatus = OUTPUT;  units = LBM_PER_SEC;
    description = "Map design mass flow 2. ";
  }
  real term;

  //--------------------------------------
  // ******* OPTION VARIABLE SETUP *******
  //--------------------------------------

  Option switchDes {
    allowedValues = { DESIGN, OFFDESIGN };
    description = "Determines if the subelement is in design or off-design mode.";
    rewritableValues = FALSE;
  }

  //---------------------------------------------
  // ******* VARIABLE CHANGED METHODOLOGY *******
  //---------------------------------------------

  void variableChanged(string name, any oldVal) {
    if (name == "switchDes") {
      if (switchDes == DESIGN) {
        s_effect.IOstatus = OUTPUT;
        s_W1.IOstatus = OUTPUT;
        s_W2.IOstatus = OUTPUT;
      } else if (switchDes == OFFDESIGN) {
        s_effect.IOstatus = INPUT;
        s_W1.IOstatus = INPUT;
        s_W2.IOstatus = INPUT;
      }
    }
  }

  //-------------------------------------------------
  // ******* PERFORM ENGINEERING CALCULATIONS *******
  //-------------------------------------------------

  void calculate() {
    if(switchDes == DESIGN) {
      W1Map = W1MapDes;
      W2Map = W2MapDes;
      AU = TB_AU(W1Map, W2Map);
      NTU = AU/capMin;
      term = (1/CR) * NTU**0.22 * (exp(-CR * NTU**0.78)-1);
      effectMap = 1 - exp(term);
      effectMapDes = effectMap;
      dPqP1Map = TB_dPqP1(W1Map);
      dPqP1MapDes = dPqP1Map;
      dPqP2Map = TB_dPqP2(W2Map);
      dPqP2MapDes = dPqP2Map;

      s_effect = effectDes/effectMapDes;
      s_W1 =  Fl_I1.W/W1MapDes;
      s_W2 = Fl_I2.W/W2MapDes;
      s_dPqP1 = dPqP1Des/dPqP1MapDes;
      s_dPqP2 = dPqP2Des/dPqP2MapDes;

      effect_dmd = effectDes;
      dPqP1_dmd = dPqP1Des;
      dPqP2_dmd = dPqP2Des;
    } else {
      W1Map = Fl_I1.W / s_W1;
      W2Map = Fl_I2.W / s_W2;
      AU = TB_AU(W1Map, W2Map);
      NTU = AU/capMin;
      term = (1/CR) * NTU**0.22 * (exp(-CR * NTU**0.78)-1);
      effectMap = 1 - exp(term);

      dPqP1Map = TB_dPqP1(W1Map);
      dPqP2Map = TB_dPqP2(W2Map);

      effect_dmd = effectMap * s_effect;
      dPqP1_dmd = dPqP1Map * s_dPqP1;
      dPqP2_dmd = dPqP2Map * s_dPqP2;
    }
  }
}
