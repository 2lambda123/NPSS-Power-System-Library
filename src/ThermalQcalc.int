/*******************************************************************************
© Copyright 2003. The U.S. Government, as Represented by the Administrator of
the National Aeronautics and Space Administration (NASA). All rights reserved.
Includes content licensed from the U.S. Government, National Aeronautics and
Space Administration under United States Copyright Registration Numbers
V3503D364 and V3482D344.
© 2008-2013 NPSS® Consortium, www.NPSSConsortium.org/AllRightsReserved
*******************************************************************************/

/*******************************************************************************
NPSS® software and related documentation is export controlled with an Export
Control Classification Number(ECCN) of 9D991, controlled for Anti-Terrorism
reasons, under U.S. Export Administration Regulations 15 CFR 730-774. It may
not be transferred to a country checked under anti-terrorism on the Commerce
Country Chart structure or to foreign nationals of those countries in the U.S.
or abroad without first obtaining a license from the Bureau of Industry and
Security, United States Department of Commerce. Violations are punishable by
fine, imprisonment, or both.
*******************************************************************************/
//
// For further information contact support@wolverine-ventures.com
//

#ifndef __THERMAL_QCALC__
#define __THERMAL_QCALC__

#include <InterpIncludes.ncp>

class ThermalQcalc extends Subelement {

extern real Q_O.HeatTransferRate;
extern real Q_O.MassTemp;
extern real Q_dmd;

//------------------------------------------------------------
//     ******* DOCUMENTATION *******
//------------------------------------------------------------
  title = "";

  description = "The "+isA()+" subelement performs a simple set of calculations
to represent the thermal mass (temperature dynamics) of an electrical component.
This subelement is intended to be incorporated in an appropriate socket within
the electrical component and interfaces the component to a thermal management
system via a thermal port that must live within the electrical component.";

  usageNotes = isA() +
  "

- Parent component must have a thermal port.

- Parent component must also have a Q_loss variable that contains the
heat generated within the component at the given timestep.

- The component temperature is calculated with a solver independent
integrator pair.

";

background = "";

//------------------------------------------------------------
//     ******* SETUP VARIABLES ********
//------------------------------------------------------------
  FlowStation Fl_vol;

  real eff{
    value = 1.0;  IOstatus = OUTPUT;  units = NONE;
    description = "Net transfer effectivness";
  }
  real T_fluid{
    value = 0;  IOstatus = INPUT;  units = RANKINE;
    description = "Input temperature of fluid";
  }
  real T_s{
    value = 0;  IOstatus = INPUT;  units = RANKINE;
    description = "Surface temperature of surface";
  }
  real W_fluid{
    value = 0;  IOstatus = INPUT;  units = LBM_PER_SEC;
    description = "Mass flow of fluid";
  }
  real Cp_fluid {
    value = 0;  IOstatus = INPUT;  units = BTU_PER_LBM_R;
    description = "Fluid Cp (specific heat)";
  }
  real Q_max {
    value = 0;  IOstatus = OUTPUT;  units = BTU_PER_SEC;
    description = "Maximum heat into flow";
  }
  real Q_real {
    value = 0;  IOstatus = OUTPUT;  units = BTU_PER_SEC;
    description = "Real heat into flow";
  }

//------------------------------------------------------------
// ******* INTERNAL SOLVER SETUP *******
//------------------------------------------------------------

//------------------------------------------------------------
//  ******  ADD SOLVER INDEPENDENTS & DEPENDENTS  ******
//------------------------------------------------------------

//------------------------------------------------------------
// ******* VARIABLE CHANGED METHODOLOGY *******
//------------------------------------------------------------
void variableChanged( string name, any oldVal )
{
  //------------------------------------------------------------
  // if the heat transfer rate is being set, push it to the port
  //------------------------------------------------------------
  if ( name == "Q_dmd" ) {
    Q_O.HeatTransferRate = Q_dmd;
  }
}

  //------------------------------------------------------------
  //   ******* OPTION VARIABLE SETUP *******
  //------------------------------------------------------------
  // default value is the first variable in the allowedValues list


  //------------------------------------------------------------
  // ****** SETUP PORTS, FLOW STATIONS, SOCKETS, TABLES ********
  //------------------------------------------------------------

  // FLUID PORTS

  // FUEL PORTS

  // BLEED PORTS

  // THERMAL PORTS

  // MECHANICAL PORTS

  // FLOW STATIONS

  // SOCKETS

  // TABLES

  //------------------------------------------------------------
  //   ******* PERFORM ENGINEERING CALCULATIONS *******
  //------------------------------------------------------------
  void calculate() {
    //------------------------------------------------------------
    // Get input parameters
    //------------------------------------------------------------
    T_fluid  = Fl_I.Tt;
    Cp_fluid = Fl_I.Cpt;
    W_fluid = Fl_I.W;
    T_s = Q_O.MassTemp;
    cout << "T_fluid = " << T_fluid <<endl;
    // cout << "T_s = " << T_s <<endl;
    //cout << "Q_I.HeatTransferRate = " << Q_I.HeatTransferRate << ", ";

    //------------------------------------------------------------
    // Determine the max heat flow
    //------------------------------------------------------------
    Q_max = W_fluid* Cp_fluid *(T_s - T_fluid);
    //------------------------------------------------------------
    // Determine the actual heat flow
    //------------------------------------------------------------
    Q_real = eff * Q_max;
    Q_O.HeatTransferRate = Q_real;
    cout << "Q_real = " << Q_real <<endl;
            //cout << "Mass = " << Mass << ", ";

    //------------------------------------------------------------
    // Determine the temperature derivative
    //------------------------------------------------------------

    Q_dmd = Q_real;
  }
}

#endif
