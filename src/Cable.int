// ****************************************************************************
// * NASA Glenn Research Center
// * 21000 Brookpark Rd
// * Cleveland, OH 44135
// * Jeffrey Csank, David Sadey, Tom Lavelle
// * April 26, 2018
// ****************************************************************************

//#include <InterpIncludes.ncp>
class Cable extends Element {
	
	//------------------------------------------------------------
	//     ******* DOCUMENTATION *******
	//------------------------------------------------------------
	
	title = "";
	
	description = isA() + " Determines power for the cable";
	
	usageNotes = isA() + "- NOTE TO USERS: This file....";
	
	background = "";
	
	//------------------------------------------------------------
	//     ******* SETUP VARIABLES ********
	//------------------------------------------------------------
	
	real R{
		value = .01;  IOstatus = "input";  //units = OHM;
	}
    
	real L{
		value = .0000796;  IOstatus = "input";  //units = H_PER_FT;
	}
    
    real length{
		value = 1.;  IOstatus = "input";  //units = M;
	}

	// Will add losses in future releases.
	real Loss_j {
		value = 0; IOstatus="output"; //units=W;
		description = "Cable Loss";
	}

	real Loss_r {
		value = 0; IOstatus="output"; //units=W;
		description = "Cable Loss";
	}

    real Q_loss {
        value = 0; IOstatus="output"; //units=W;
        description = "Power dissipation at current time";
    }

	real Mass {
		value=0; IOstatus="output"; //units=KG;
		description = "Mass output of the cable";
	}
	
	real SpecificAmperage {
	value = 170.; IOstatus="input"; //units=amp * m / kg;
	description = "Amps to Weight/length ratio for the cable";
	}

	ComplexNumber dV;
	ComplexNumber Z;
	ComplexNumber I;

	//------------------------------------------------------------
	//   ******* OPTION VARIABLE SETUP *******
	//------------------------------------------------------------

	Option switchDes {
		allowedValues = { "DESIGN", "OFFDESIGN" } ;
		description = "Determines if the element is in design or off-design mode";
		rewritableValues = FALSE;
		trigger=FALSE;
	}
    Option switchThermPort {
    	allowedValues = { "TRUE", "FALSE" };
        //value = "FALSE";
    	description = "Determines if component needs thermal port";
    	rewritableValues = FALSE;  // Enables converter optimization.
        trigger=TRUE;
    }
	
	//------------------------------------------------------------
	// ****** SETUP PORTS, FLOW STATIONS, SOCKETS, TABLES ********
	//------------------------------------------------------------	
	// FLUID PORTS

	// FUEL PORTS

	// BLEED PORTS

	// THERMAL PORTS

	// 	ELECTRICAL PORTS

	ElectricOutputPort EP_O {
		description = "Electric port";
	}
	string EPortRef;
	
	ElectricInputPort EP_I {
		description = "Electric Port";
	}

	//MECHANICAL PORTS

	// FLOW STATIONS 

	// SOCKETS
    Socket S_eThermMass {
		allowedValues = { "Q_loss", "Mass" };
		description = "Thermal mass socket";
		socketType = "EThermalMass";
    }

	// TABLES

	//------------------------------------------------------------
	// ******* VARIABLE CHANGED METHODOLOGY *******
	//------------------------------------------------------------

	void variableChanged( string name, any oldVal ) {
		if ( name == "switchThermPort" ){ 
			if ( switchThermPort == "TRUE" ){
				create("", "ThermalInputPort", "Q_I" );
			}
		}
		if (name =="switchDes") {
			if (switchDes == DESIGN) {
				R.IOstatus = INPUT;
				L.IOstatus = INPUT;
				length.IOstatus = INPUT;
				SpecificAmperage.IOstatus = INPUT;
			}
			else if (switchDes == OFFDESIGN) {
				R.IOstatus = OUTPUT;
				L.IOstatus = OUTPUT;
				length.IOstatus = OUTPUT;
				SpecificAmperage.IOstatus = OUTPUT;
			}
		}
	} // end variableChanged()

	//------------------------------------------------------------
	//   ******* PERFORM ENGINEERING CALCULATIONS *******
	//------------------------------------------------------------
	
	void calculate() {
		
		//-------------------------------------------------------
		// calculate current from voltage drop
		//-------------------------------------------------------
		
		Z.setrj( R,  L*(2*PI*EP_I.frequency) );
		
		dV.copy( "EP_I.VLN" );
		dV.minus( "EP_O.VLN" );	
		I.copy( "dV" );
	    I.div( "Z" );

	    //----------------------------------------------------------
	    // set the conditions in the port
	    //-----------------------------------------------------------
		EP_O.frequency=EP_I.frequency;
		EP_O.setIVRMS( I.rRMS, I.jRMS, EP_O.V.rRMS, EP_O.V.jRMS ); 
		EP_I.setIVRMS( I.rRMS, I.jRMS, EP_I.V.rRMS, EP_I.V.jRMS ); 		
		
        Loss_r = EP_I.S.r - EP_O.S.r;
        Loss_j = EP_I.S.j - EP_O.S.j;

        if (switchThermPort=="TRUE"){
            real KW_PER_BTU_PER_SEC = 1.05505585;
            Q_loss = sqrt(Loss_r*Loss_r + Loss_j*Loss_j);
            Q_loss /= KW_PER_BTU_PER_SEC;
            //------------------------------------------------------------    
            // Run the thermal mass model.
            //------------------------------------------------------------
            if ( !S_eThermMass.isEmpty() ) {
              S_eThermMass.execute();
            }
        }
		
		//Loss = 3 * EP_I.I.mag * (EP_I.V.mag - Vload) / 1000.;
		if (switchDes=="DESIGN"){
			/***************************
			On-Design
			in on design, calculate the mass of the cable
			***************************/
			Mass=EP_I.I.mag/SpecificAmperage*length*3;
		}		
	}
}