
#include "ComplexNumber.int"

int ESO_Id_NoRefPort = 10000*141 + 100*22 + 1;
ESOregCreate(ESO_Id_NoRefPort, 1, "No refport in this port (Make sure the port is connected!)");
int ESO_Id_ImagInDC = 10000*142 + 100*22 + 1;
ESOregCreate(ESO_Id_ImagInDC, 1, "Imaginary components in DC port");

class ElectricPort extends Subelement {
  
  //------------------------------------------------------------
  //     ******* DOCUMENTATION *******
  //------------------------------------------------------------
  title = "";
  description = isA() + " Electric Port";
  usageNotes = isA() + "- NOTE TO USERS: This file....";
  background = "";   
  
  //-------------------------------------------------
  // Electric port parameters
  //-------------------------------------------------
  ComplexNumber V{
    lock = 1;	
  }
  ComplexNumber I{
    lock = 0;	
  }
  ComplexNumber S{
    lock = 1;
  }
  
  V.hide( 1 );
  S.hide( 1 );
  I.hide( 1 );
  
  socketRequired = 0;
  
  Option ElectricPowerType {
    allowedValues = { "AC1", "DC", "AC3" };
    description = "Electric Power Type (DC, AC1, AC3)";
    trigger = 1;
    rewritableValues = FALSE;
  }
  
  real frequency{
    value=0.; 
    IOstatus="input"; //units=kW;
    description = "Frequency";
  }
  
  real PF{
    value=0;
    description = "Ratio of real to apparent power";
  }
  
  string refport{
    description = "port used to copy from";	
  }
  
  ComplexNumber VLN{
    hide( 0 );	
  }
  
  //------------------------------------------------------------
  // ******* VARIABLE CHANGED METHODOLOGY *******
  //------------------------------------------------------------
  void variableChanged( string name, any oldVal ) {
    
    if ( name =="ElectricPowerType" ) {
      
      // change variable IO status depending switchDes status
      if ( ElectricPowerType == "DC" ) {
        V.hide( 0 );
        S.hide( 0 );
        I.hide( 0 );
        frequency=0;
      } 
      else if ( ElectricPowerType == "AC1" ) {
        V.hide( 0 );
        S.hide( 0 );
        I.hide( 0 );		
      } 
      else if ( ElectricPowerType == "AC3" ) {
        V.hide( 0 );
        S.hide( 0 );
        I.hide( 0 );		
      } 
    } 
  } 
  
  
  //------------------------------------------------------
  // copy the port information
  //------------------------------------------------------
  void copyport() {
    
    V.copy( refport+".V" );
    I.copy( refport+".I" );
    S.copy( refport+".S" );
    VLN.copy( refport+".VLN" );
    
    //frequency=refport->frequency;
    
    if (refport->frequency == 0){
      refport->frequency = frequency;
    }
    frequency=refport->frequency;

    if (refport==""){
      ESOreport(ESO_Id_NoRefPort);
    }		
  }
  
  //------------------------------------------------------
  // push the port information
  //------------------------------------------------------
  void pushport() {
    refport->copyport();
    if (refport==""){
      ESOreport(ESO_Id_NoRefPort);
    }		
  }
  
  //-----------------------------------------------------------
  // set the port conditions based on current, voltage, 
  // and angles in degrees
  //-----------------------------------------------------------
  void setIVRMSphaseDeg( real ImagRMS, real Iangle, real VmagRMS, real Vangle ){
    setIVRMS( ImagRMS*cos(Iangle*PI/180.),	ImagRMS*sin(Iangle*PI/180.),
      VmagRMS*cos(Vangle*PI/180.), VmagRMS*sin(Vangle*PI/180.) );
      
  }
  
  //-----------------------------------------------------------
  // set the port conditions based on current, voltage, and 
  // angles in radians
  //-----------------------------------------------------------
  void setIVRMSphaseRad( real ImagRMS, real Iangle, real VmagRMS, real Vangle ){
    setIVRMS( ImagRMS*cos(Iangle), ImagRMS*sin(Iangle),
      VmagRMS*cos(Vangle), ImagRMS*sin(Vangle) );
  }
  
  
  //-----------------------------------------------------------
  // set the port conditions based on complex current and voltage
  //-----------------------------------------------------------
  void setIVRMS( real IrRMS, real IjRMS, real VrRMS, real VjRMS ){
    
    //--------------------------------------------------------------------
    // unlock the parameters so they can be set
    //--------------------------------------------------------------------
    V.lock = 0;
    I.lock = 0;
    S.lock = 0;
    
    // set the current and voltage
    V.setrjRMS( VrRMS, VjRMS );
    I.setrjRMS( IrRMS, IjRMS );
    
    //--------------------------------------------------------------------
    // check to see if we are in DC power mode and passing imaginary info
    //--------------------------------------------------------------------
    if (ElectricPowerType == "DC" ){	
      if ( VjRMS!=0. || IjRMS!=0. ){
        ESOreport(ESO_Id_ImagInDC, refport + "contains imaginary components.", 1);
      }
    }
    
    //-------------------------------------------------------------------
    // determine the power
    //--------------------------------------------------------------------
    if (ElectricPowerType == "DC" || ElectricPowerType=="AC1")
    {
      // VLN = V (VLL) for single phase AC			
      VLN.copy("V");
      
      // calc power
      S.copy( "I" );
      S.conjugate();
      S.times( "V" );
      S.scale( 1./1000. );
    }
    
    if (ElectricPowerType == "AC3"){
      
      // calc VLN
      VLN.copy( "V" );
      VLN.setMagPhase( V.mag, V.phase-30.*PI/180. );
      VLN.scale( sqrt(1./3.) );

      // calc power based off VLN (since VLN is already scaled
      S.copy( "I" );
      S.conjugate();
      S.timesRMS( "VLN" );
      S.scale( 3./1000. );
    }
    
    // calc power factor
    PF = S.r/S.mag;
    
    //------------------------------------------------------------------
    // lock the numbers again
    // only way to set the values should be through this function
    //------------------------------------------------------------------
    V.lock = 1;
    I.lock = 0;
    S.lock = 1;
    
    pushport();	
  }
}



class ElectricOutputPort extends ElectricPort;

class ElectricInputPort extends ElectricPort;
