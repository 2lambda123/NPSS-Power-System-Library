/***
 -------------------------------------------------------------------------------
 |                                                                             |
 | NASA Glenn Research Center                                                  |
 | 21000 Brookpark Rd 		                                                    |
 | Cleveland, OH 44135 	                                                       |
 |                                                                             |
 | File Name:     npssel.view							                               |
 | Author(s):     George Thomas, Jeffrey Csank, David Sadey, Tom Lavelle       |
 | Date(s):       November 2020                                                |
 |                                                                             |
 -------------------------------------------------------------------------------
***/

OutFileStream pageStream { filename = "output/powertrain.viewOut"; } 

// This function is called at the beginning of each run of page.display(), in order
// to set up things relevant to NPSS Power System Library components
void setupElectricalPageViewer() {

   // If we use the default component print order (based on order the propagate power
   // code crawls over the circuit) then we don't have to do much.
   // if (page.componentOrder == "SOURCE_TO_LOAD") {
   page.outputPortList = {};
   int idxComp;
   for (idxComp = 0; idxComp < powerComponentListSourceToLoad.entries(); idxComp++) {
      
      string compName = powerComponentListSourceToLoad[idxComp];
      string compPorts[] = compName->list("ElectricPort", TRUE);
      
      if (compPorts.entries() > 0) {
         page.outputPortList.append(compPorts);
      }
   }

   // Set up the page viewer filename as well, as the model name may have been set at this point.
   // Every time we change the filename, it wipes out the existing file contents, so only do it
   // if we're in DESIGN mode.
   if (page.switchDes == "DESIGN") {
      pageStream.filename = "output/"+MODELNAME+".viewOut";
   }
}

DataViewer PageViewer page { 

   // Give this page viewer a switchDes, we will use it for the setup function
   Option switchDes {
      allowedValues = { "DESIGN", "OFFDESIGN" };
      description = "Design/Off-Design switch";
      rewritableValues = FALSE;
      trigger = FALSE;
      value = "DESIGN";
   }

   // Create some objects that our special power system viewer will use
   string outputPortList[];

   // Override the base class's display function, and do some stuff first to prepare the electric viewer
   void display() {
      setupElectricalPageViewer();
      elecPorts.elecPortPowerData.componentList = outputPortList;
      elecPorts.elecPortVIData.componentList = outputPortList;
      elecComponents.elecComponentData.componentList = powerComponentListSourceToLoad;
      PageViewer::display();
   }

   GroupBlock TnBGroup {

      SimpleBlock title { 
   body = "*******************************************************************************\n" +
         "NCP ????????????????????????????    model:?????????????????   run by:?????????????   solutionMode=?????????????     converge=?????    CASE:?????\n" +
         "time:???.????   timeStep:?.?????    therm_package:?????????   Mode:???????????????   itr/pas/Jac/Bry=????/????/???/???    run: ???????? ????????" ;
   vars = {"VERSION","MODELNAME","USER","solver.solutionMode","solver.converged", "CASE",
           "time","timeStep","THERMPACKAGE","page.switchDes","solver.iterationCounter","solver.passCounter","solver.numJacobians","solver.numBroydens","date","timeOfDay"}
      } 

   
      anchor = "title"; 
      addGutter = TRUE;
   } // end TnBGroup

   LinkColTBlock inputs { 
      titleBody = "                                        FLOW STATION DATA";
      titleVars = { }
      compType = "FluidOutputPort";
      compTypeFormat = "????????????????????????";
      excludeCompTypes = { "InterStageBleedOutPort", "BleedOutPort" }     //remove to include bleed ports 
      compAttr = { "W:????.??", "Pt:????.???", "Tt:?????.??", "ht:????.??", "FAR:?.????", 
                  "Wc:????.??", "Ps:????.???", "Ts:?????.??", "rhos:?.??????", "Aphy:?????.?", "MN:?.????", "gamt:??.?????" }
   } 

   GroupBlock Turbomachinery { 
      DColTBlock comps { 
         titleBody = "TURBOMACHINERY PERFORMANCE DATA"; 
         compType = "Compressor"; 
         compTypeFormat = "????????"; 
         compAttr = { "Fl_I.Wc:????.??=Wc", "PR:??.???", "eff:??.????", "Nc:?????.???", 
                     "TR:??.????", "effPoly:??.????=efPoly", "pwr:???????.?", "SMN:???.??", "SMW:???.??" } 
      } 
      DColTBlock turbs { 
         compType = "Turbine"; 
         compTypeFormat = "????????"; 
         compAttr = { "Fl_I.Wc:????.??=Wc", "PR:??.???", "eff:??.????", "Np:?????.???", 
                     "TR:??.????", "effPoly:??.????=efPoly", "pwr:???????.?" } 
         showColHeader=FALSE; 
      } 
      anchor = "comps"; 
      comps.bottom = "turbs"; 
      addGutter = FALSE; 
   }  //end of Turbomachinery block


   GroupBlock elecPorts { 

      SimpleBlock title { 
         body = "                                        ELECTRICAL PORT DATA"; 
      } 
      
      DColTBlock elecPortPowerData { 
         titleBody = "                                   Complex Power Data           |          Misc Data"; 
         compType = "ElectricPort"; 
         compTypeFormat = "????????????????????????"; 
         compAttr = {"S.mag:????.??=|S|, kVA","S.phaseDeg:???.???=/_S, deg","S.r:????.??=P, kW","S.j:????.??=Q, kVAR","PF:?????????.????=Power Factor","frequency:???????.???=frequency, Hz"}; 
         defSNFormat = "?.?e???";
      }
      DColTBlock elecPortVIData { 
         titleBody = "\n                                   Complex Voltage Data  (V_LL)    |     Complex Current Data  (I_Line)"; 
         compType = "ElectricPort"; 
         compTypeFormat = "????????????????????????"; 
         compAttr = {"V.mag:???????.??=|V|, V","V.phaseDeg:???.???=/_V, deg","V.r:????.??","V.j:????.??","I.mag:???????.??=|I|, A","I.phaseDeg:???.???=/_I, deg","I.r:????.??","I.j:????.??"}; 
         defSNFormat = "?.?e???";
      }

      anchor = "title";
      title.bottom = "elecPortPowerData";
      elecPortPowerData.bottom = "elecPortVIData";
      addGutter = FALSE; 
   }

   GroupBlock elecComponents { 
      SimpleBlock title { 
         body = "                                        ELECTRICAL POWER SYSTEM COMPONENT DATA"; 
      } 

      DColTBlock elecComponentData { 
         titleBody = "";
         compType = "ElectricElement"; 
         compTypeFormat = "????????????????????"; 
         compAttr = {"eff:?.?????","Mass:????.??=Mass, kg", "Loss_r:????.??=Loss_r, kW", "Loss_j:????.??=Loss_j, kVAR", "Q_heat:????.??=Q_heat, BTU/s"}; 
         defSNFormat = "?.?e???";
      }

      GroupBlock cableAndBreakerData {
         SimpleBlock title { 
            body = "\n                            ELECTRICAL POWER SYSTEM -- COMPONENT SPECIFIC DATA"; 
         } 
         DColTBlock aeroCableData { 
            titleBody = "AeroCable Data";
            compType = "AeroCable"; 
            compTypeFormat = "????????????????????";
            compAttr = {"R=R, Ohms","L=L, Henries", "Z.j=X, Reactance", "cable_size", "paralleled=#parallel", "ampacity"}

         }
         DColTBlock cableData { 
            titleBody = "Cable Data";
            compType = "Cable"; 
            compTypeFormat = "????????????????????";
            compAttr = {"R=R, Ohms","L=L, Henries", "Z.r=Z.r, Ohms", "Z.j=Z.j, Ohms (reactive)"}
         }
         DColTBlock breakerData { 
            titleBody = "Breaker Data";
            compType = "Breaker"; 
            compTypeFormat = "????????????????????";
            compAttr = {"R=R, Ohms","L=L, Henries", "Z.r=Z.r, Ohms", "Z.j=Z.j, Ohms (reactive)"}
         }
         anchor = "title"; 
         title.bottom = "aeroCableData";
         aeroCableData.bottom = "cableData";
         cableData.bottom = "breakerData";         
      }
      anchor = "title"; 
      title.bottom = "elecComponentData"; 
      elecComponentData.bottom = "cableAndBreakerData";
      addGutter = FALSE; 
   }

   LinkColTBlock thermalPorts { 
      titleBody = "                                        THERMAL PORT DATA";
      titleVars = { }
      compType = "ThermalOutputPort";
      compTypeFormat = "????????????????????????";
      compAttr = { "MassTemp", "HeatTransferRate" }
   } 

   anchor = "TnBGroup"; 
   TnBGroup.bottom = "inputs"; 
   inputs.bottom = "thermalPorts";
   thermalPorts.bottom = "elecPorts"; 
   elecPorts.bottom = "elecComponents"; 

   pageWidth = 0; 
   pageHeight = 0; 
   outStreamHandle = "pageStream"; 
}
