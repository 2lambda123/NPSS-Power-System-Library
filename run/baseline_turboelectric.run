/*******************************************************************************
� Copyright 2003. The U.S. Government, as Represented by the Administrator of
the National Aeronautics and Space Administration (NASA). All rights reserved.
Includes content licensed from the U.S. Government, National Aeronautics and
Space Administration under United States Copyright Registration Numbers
V3503D364 and V3482D344.
� 2008-2015 NPSS� Consortium, www.NPSSConsortium.org/AllRightsReserved
*******************************************************************************/

/*******************************************************************************
NPSS� software and related documentation is export controlled with an Export
Control Classification Number(ECCN) of 9D991, controlled for Anti-Terrorism
reasons, under U.S. Export Administration Regulations 15 CFR 730-774. It may
not be transferred to a country checked under anti-terrorism on the Commerce
Country Chart structure or to foreign nationals of those countries in the U.S.
or abroad without first obtaining a license from the Bureau of Industry and
Security, United States Department of Commerce. Violations are punishable by
fine, imprisonment, or both.
*******************************************************************************/

// Make GasTbl the default thermopackage
#ifndef THERMO
#define THERMO GasTbl
#endif

//include the power train components 
//#include "PTE_Viewer.view"
#include "npssel.view"
#include "npssel_runtime.view"

// add in electric port
#include "ElectricPort.prt"
#include "InterpretedPort.int"

//model file
#include "baseline_turboelectric.mdl"

/************************
On design
************************/

setOption("switchDes","DESIGN"); 
autoSolverSetup();

solver.debugLevel = "ITERATION_DETAILS";
solver.diagnosticFile = "solver.bad";
solver.maxIterations=10000;
solver.maxJacobians=5000;
real TurbPowDesired = 3000/0.746/0.8;
Independent prop_pwr{varName = "Prop.pwr";}
Dependent target_pwr{
  eq_lhs = "TurbPowDesired";
  eq_rhs = "Turb.pwr";
}
// <GLT> Add biases to solver variables so that if you guess the wrong sign,
// or solver independents otherwise need to cross zero, you won't die by div/0.
real bias_value = 10*Gen1.Vbus_LL;
Rect1.ind_Vimag.a  = bias_value;
Rect1.ind_Vimag.a  = bias_value;
Inv1.ind_Vreal.a   = bias_value;
Inv1.ind_Vimag.a   = bias_value;
EM1.ind_Vreal.a    = bias_value;
EM1.ind_Vimag.a    = bias_value;
prop_pwr.a 		   = bias_value;

//solver.solutionMode = "ONE_PASS";
solver.addIndependent("prop_pwr");
solver.addDependent("target_pwr");
solver.diagnosticFile = "mySolverOutput";
solver.debugLevel = "ITERATION_DETAILS";
//solver.clear();

// <GLT> Try changing these solver ICs to different values. Convergence is a lot more robust now.
// Looks like the only thing that botches this up now is guessing them such that you get currents
// with the wrong sign...
Rect1.Vreal  = 990;
Rect1.Vimag  = 0;
Inv1.Vreal   = 980;
Inv1.Vimag   = 0;
EM1.Vreal    = 970;
EM1.Vimag    = 0;

//cout << solverSequence << endl;
//cout << endl << solver.dependentNames << endl << solver.independentNames << endl;
run();

cout << "Rect1.S_map.pwrMap = "  <<  Rect1.S_map.pwrMap  << endl;
cout << "Inv1.S_map.pwrMap = "  <<  Inv1.S_map.pwrMap  << endl;
cout << "Propulsor_Shaft.pwrIn = "  <<  Propulsor_Shaft.pwrIn/0.746 << endl;
cout << "Propulsor_Shaft.pwrOut = " <<  Propulsor_Shaft.pwrOut/0.746 << endl;
cout << "Propulsor_Shaft.pwrNet = " <<  Propulsor_Shaft.pwrNet/0.746 << endl;
cout << "Turbine_Shaft.pwrIn = "    <<  Turbine_Shaft.pwrIn/0.746 << endl;
cout << "Turbine_Shaft.pwrOut = "   <<  Turbine_Shaft.pwrOut/0.746 << endl;
cout << "Turbine_Shaft.pwrNet = "   <<  Turbine_Shaft.pwrNet/0.746 << endl;
cout << "Turbine PR " << Turb.Fl_I.Pt/Turb.Fl_O.Pt << " Nozzle Thrust " << Noz.Fg << endl;
cout << endl;


page.display();  // output data to out file

//page_runtime.display(); // output data to cmd window
real Turb_speed = Turb.Np;

/************************
Off design
************************/

setOption("switchDes","OFFDESIGN"); 
autoSolverSetup();

Independent ind_AtmW{
  varName = "Atm.W";
}

Dependent corr_speed{
  //eq_lhs = "Turb_speed";
  eq_lhs = "84.";
  eq_rhs = "Turb.Np";
}

solver.addIndependent( "ind_AtmW" );

solver.removeIndependent( "Propulsor_Shaft.ind_Nmech" );
//Propulsor_Shaft.Nmech*=.9;

//solver.addDependent("corr_speed");
//solver.addIndependent("prop_pwr");
solver.maxIterations = 10000;

// Run something like a power hook, start at design power, then drop it down to
// a little less than half power and see how efficiencies, P_in/P_out change
for (CASE = 1 ; CASE < 12; CASE++)
{
	run();

	cout << "Rect1.S_map.pwrMap = "  <<  Rect1.S_map.pwrMap  << endl;
	cout << "Inv1.S_map.pwrMap = "   <<  Inv1.S_map.pwrMap  << endl;
	cout << "Rect1.S_map.effMap = "  <<  Rect1.S_map.effMap  << endl;
	cout << "Inv1.S_map.effMap = "   <<  Inv1.S_map.effMap  << endl;
	cout << "Propulsor_Shaft.pwrIn = "  <<  Propulsor_Shaft.pwrIn/0.746 << endl;
	cout << "Propulsor_Shaft.pwrOut = " <<  Propulsor_Shaft.pwrOut/0.746 << endl;
	cout << "Propulsor_Shaft.pwrNet = " <<  Propulsor_Shaft.pwrNet/0.746 << endl;
	cout << "Turbine_Shaft.pwrIn = "    <<  Turbine_Shaft.pwrIn/0.746 << endl;
	cout << "Turbine_Shaft.pwrOut = "   <<  Turbine_Shaft.pwrOut/0.746 << endl;
	cout << "Turbine_Shaft.pwrNet = "   <<  Turbine_Shaft.pwrNet/0.746 << endl;
	cout << "Turbine PR " << Turb.Fl_I.Pt/Turb.Fl_O.Pt << " Nozzle Thrust " << Noz.Fg << endl;
	cout << endl;
	page.display();  // output data to out file

	Prop.pwr *= 0.95;
}

//page_runtime.display(); // output data to cmd window


