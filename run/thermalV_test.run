MODELNAME = "Thermal Duct Tester";
setThermoPackage("FPT");
// setThermoPackage("GasTbl");
#include "ThermalDuct.int"
#include "ThermalLoad.int"
#include "ThermalTank.int"

solver.maxIterations = 100;
solver.maxJacobians = 100;

Element FlowStart fs_coolant{
 Fl_O.comp = "H2O";
 Tt = 500.0;
 Pt = 15;
 W = 1;
}


Element ThermalTank volume{
  switchMass = "INPUT";
  W_out = 0.0;
  dPqP_dmd = 0.00;
  T_mass = 500;
  mass = 1;
}

Element FlowEnd fe_coolant{
	void postexecute(){
	  //cerr << "comp is " << Fl_I.comp << endl;
	}
}

/////////////////////////////////////////////////////
//
//               Steady-State Runs
//
////////////////////////////////////////////////////

linkPorts("fs_coolant.Fl_O","volume.Fl_I", "FC1");
linkPorts("volume.Fl_O","fe_coolant.Fl_I", "FC2");

solverSequence = { "fs_coolant", "volume", "fe_coolant"};
autoSolverSetup();
setOption("switchDes", "DESIGN");

cout << solverSequence << endl;
cout << endl << solver.dependentNames << endl << solver.independentNames << endl;
// cout<< thermal_duct.Q_O.list("Variable",TRUE)<<endl;

cout<<"---------Run Design--------------"<<endl;
run();

cout << "FS_T_coolant = " << (fs_coolant.Fl_O.Tt) << endl;
cout << "volume_T_coolant_out = " << (volume.Fl_O.Tt) << endl;

cout << "FS_P_coolant = " << (fs_coolant.Fl_O.Pt) << endl;
cout << "volume_P_coolant_out = " << (volume.Fl_I.Pt) << endl;

cout << "mass_Vol_coolant = " << (volume.mass) << endl;
cout << "volume_W_coolant = " << (volume.Fl_O.W) << endl;

/////////////////////////////////////////////////////
//
//               Transient Runs
//
////////////////////////////////////////////////////

int trans_enable = TRUE;

if (trans_enable==TRUE){
  solver.defaultDxLimit = 0.001;
  solver.maxIterations=300;
  solver.maxJacobians=300;
  setOption("switchDes","OFFDESIGN");

  setOption( "solutionMode", "TRANSIENT");
  transient.stopTime = 1;
  transient.baseTimeStep = 0.1;
  fs_coolant.Tt = 550;
  transient.setup();
  autoSolverSetup();

  cout << endl << solver.dependentNames << endl << solver.independentNames << endl;

  // Transient data out to a CSV file for plotting
  OutFileStream transientCSVStream { filename = "ThermalV_transient.csv"; }

  // Write the CSV headers
  transientCSVStream << "time,";
  transientCSVStream << "T_coolant in,";
  transientCSVStream << "T_mass out,";
  transientCSVStream << "Mass"<< endl;


  void csvTransientPrint()
  {
      transientCSVStream << time << ", ";
      transientCSVStream << fs_coolant.Fl_O.Tt << ", ";
      transientCSVStream << volume.Fl_O.Tt << ", ";
      transientCSVStream << volume.mass << endl;


      cout << "time, "  << time<< ", ";
      cout << "T_in, "  << fs_coolant.Fl_O.Tt << ", ";
      cout << "T_vol, " << volume.Fl_O.Tt << ", ";
      cout << "Mass_Tank, " << volume.mass << endl;

  }

  postsolverSequence = { "csvTransientPrint" };
  run();

}
