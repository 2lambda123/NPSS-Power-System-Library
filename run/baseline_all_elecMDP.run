/***
 -------------------------------------------------------------------------------
 |                                                                             |
 | NASA Glenn Research Center                                                  |
 | 21000 Brookpark Rd 		                                                     |
 | Cleveland, OH 44135 	                                                       |
 |                                                                             |
 | File Name:     baseline_all_elecMDP.run                                     |
 | Author(s):     George Thomas & Jonathan Fuzaro Alencar                      |
 | Date(s):       February 2020                                                |
 |                                                                             |
 | Description:   Run file for a highly simplified all-electric aircraft       |
 |                powertrain with MDP-based logic to size the battery.         |
 |                                                                             |
 -------------------------------------------------------------------------------
***/

/**
 ---------
 | Setup |
 ---------
**/

#include "npssel.view"
#include "PrintUtils.fnc"

#include "ElectricPort.prt"

#define HP_PER_KW 0.7457

solver.maxJacobians = 5000;
solver.maxIterations = 10000;

// this assembly represents the powertrain running at a hover power setting
Element Assembly HOV { 

  #include "baseline_all_elec.mdl"

  Solver solver { 
    maxJacobians = 5000;
    maxIterations = 10000;
  }

  Source.segmentTime = 20./60.; // 20 minutes of hover (expressed in hours which is this var's unit)
  Source.energyDes = Load.Pdemand * Source.segmentTime; // initial guess for design energy in kW-h.
}

// this assembly represents the powertrain running at a lower, cruise power setting
Element Assembly CRZ {

  #include "baseline_all_elec.mdl"

  Solver solver { 
    maxJacobians = 5000;
    maxIterations = 10000;
  }

  Source.segmentTime = 60./60.; // 60 minutes of cruise

  // no need to guess design energy in the cruise assembly
  // assume cruise power is 1/2 hover power
  Load.Pdemand = HOV.Load.Pdemand * 0.5;

  // pass reference point scalars to this assembly
  void preexecute() {
    Source.R = HOV.Source.R;
    A1.R = HOV.A1.R;
    // Converter.S_map.s_effDes = HOV.Converter.S_map.s_effDes;
    // Converter.S_map.s_pwrDes = HOV.Converter.S_map.s_pwrDes;
    // Converter.pwrDes = HOV.Converter.pwrDes;
    A2.L = HOV.A2.L;
  }    
}

HOV {
  setOption("switchDes", "DESIGN");
  setOption("multiDes", "TRUE");

  // turn off source internal design energy ind/dep pair 
  Source {
    ind_energyDes.autoSetup = FALSE;
    dep_energyDes.autoSetup = FALSE;
  }
} 

CRZ {
  setOption("switchDes", "OFFDESIGN");
}

/**
 * Vary design assembly's (HOV's) design energy until that energy matches the
 * sum of energies consumed in all flight segments.
 */
Independent ind_energyDes {
  varName = "HOV.Source.energyDes";
  autoSetup = TRUE;
}

Dependent dep_energyDes {
  eq_lhs = "HOV.Source.energyDes";
  eq_rhs = "HOV.Source.energy + CRZ.Source.energy";
  autoSetup = TRUE;
}

/**
 --------------------
 | Run Solver Cases |
 --------------------
**/

setOption("switchDes", "DESIGN");
HOV.autoSolverSetup();
CRZ.autoSolverSetup();
autoSolverSetup();

run(); CASE++;
page.display();
printDesignBanner("on");
printSolverSetup("HOV.solver", FALSE);
printCaseStats("HOV.solver");
cout << "====================\n\n";
printSolverSetup("CRZ.solver", FALSE);
printCaseStats("CRZ.solver");
cout << "====================\n\n";
printSolverSetup("solver", FALSE);
printCaseStats("solver");
cout << "====================\n\n";

CRZ.solver.clear();

solver {
  clear();
  executionSequence.remove("CRZ");
}

// add post execute sequence to track energy consumption for flight missions
HOV {
  void postexecute() {
    Source.energyConsumed += Source.energy;
    if (Source.energyConsumed > Source.energyDes) {
      ESOreport(ESO_Id_ExceededEnergyDes,
      "Source component's energy consumed (" + toStr(Source.energyConsumed) +
      ") exceeded design energy (" + toStr(Source.energyDes)+").", 1);
    }
  }
}

ind_energyDes.autoSetup = FALSE;
dep_energyDes.autoSetup = FALSE;

setOption("switchDes", "OFFDESIGN");
setOption("switchTrackEnergy", "TRUE"); // source energy consumption tracker
HOV.autoSolverSetup(); 

printDesignBanner("off");
printSolverSetup("HOV.solver", FALSE);

// power loads for each flight mission segment [kW]
// load = HP_TO_KW * avg(front + rear)
real loads[];
loads.append($HP_PER_KW * (21.2 + 18.7) / 2);
loads.append($HP_PER_KW * (10.7 + 13.2) / 2);
loads.append($HP_PER_KW * (21.2 + 18.7) / 2);
loads.append($HP_PER_KW * ( 9.4 + 11.8) / 2);

// segment time intervals [hr]
real segments[];
segments.append( 2. / 60.); //  2 [min]
segments.append(50. / 70.); //    [nm / kn = hr]
segments.append( 2. / 60.); //  2 [min]
segments.append(20. / 60.); // 20 [min]

int i;
CASE = 0;
for (i = 0; i < loads.entries(); i++) {
  HOV.Load.Pdemand = loads[i];
  HOV.Source.segmentTime = segments[i];
  run(); CASE++;
  page.display();
  cout << "=====================\n";
  printCaseStats("HOV.solver");
  cout << "Power demand: "    << loads[i]         << " kW\n"
       << "Flight interval: " << segments[i]      << " hr ("
                              << segments[i] * 60 << " min)\n"
       << "Energy Consumed: " << HOV.Source.energyConsumed << " kW-hr\n";
  cout << "=====================\n\n";
}