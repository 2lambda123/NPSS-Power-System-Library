

// add in port
#include "ElectricPort.prt"
#include "InterpretedPort.int"

//include viewers
#include "npssel.view"
#include "npssel_runtime.view"

// add circuit elements
#include "Resistor.int"


// select model
#include "R_dc_example.mdl"

autoSolverSetup();

//---------------------------------------------------------
// just like a rocket engine, volumes last
//---------------------------------------------------------
//solverSequence = { "Bat", "R1", "C1", "L1", "C2","E1","E2" }
//solverSequence = { "Bat", "R1", "C1", "L1", "C2" }
solver.debugLevel = "ITERATION_DETAILS";
solver.diagnosticFile = "Solver.bad";


solver.maxIterations = 5000;
solver.maxJacobians = 1000;
setOption( "ElectricPowerType", "DC" );
 
run();

cout<< "\n \n"<<endl;
cout<<"====================================================="<<endl;
cout << " Component \t Power(dc) \t Voltage(dc) \t Current(dc)"<<endl;
cerr << "    R1: \t " << R1.EP_I.Pdc << " \t " << R1.EP_I.Vdc << "  \t " << R1.EP_I.Idc << endl;
cerr << "    R2: \t " << R2.EP_I.Pdc << " \t " << R2.EP_I.Vdc << "  \t " << R2.EP_I.Idc << endl;
cerr << "    R3: \t " << R3.EP_I.Pdc << " \t " << R3.EP_I.Vdc << "  \t " << R3.EP_I.Idc << endl;


page.display();  // output data to out file
page_runtime.display(); // output data to cmd window