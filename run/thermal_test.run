setThermoPackage("FPT");
// setThermoPackage("GasTbl");
#include "ThermalDuct.int"
#include "ThermalLoad.int"
#include "ThermalTank.int"
#include "ThermalEff.map"

MODELNAME = "Thermal heat exchanger loop test";

solver.maxIterations = 200;
solver.maxJacobians = 100;

Independent ind_Tbal{
  varName = "fs_coolant.Tt";
}

Dependent dep_Tbal{
  eq_lhs = "fs_coolant.Fl_O.Tt";
  eq_rhs = "fe_coolant.Fl_I.Tt";
}

Element FlowStart fs_air{
 Fl_O.comp = "CEAT";
 Tt = 518.0;
 Pt = 14.504;
 W = 1.0;
}

Element FlowStart fs_coolant{
 Fl_O.comp = "H2O";
 Tt = 550.0;
 Pt = 14.504;
 W = 0.5;
}

Element ThermalLoad Load{
  Q_in = 10;
  // void preexecute(){
  //   Q_in = TB_Q( time );
  //   // cout<<Q_in<<endl;
  // }
}

Element ThermalDuct thermal_duct{
  dPqP_dmd = 0.01;
  eff = 0.8;
}

Element ThermalTank volume{
  switchMass = "INPUT";
  W_out = 0.4;
  dPqP_dmd = 0.01;
  T_mass = 518; // guess
  mass = 0.5;
}

Element ThermalHeatExchanger HEX{
  Subelement ThermalEff S_EFFECT {}
  // effect = 0.8;
}

Element FlowEnd fe_air{
	void postexecute(){
	  //cerr << "comp is " << Fl_I.comp << endl;
	}
}

Element FlowEnd fe_coolant{
	void postexecute(){
	  //cerr << "comp is " << Fl_I.comp << endl;
	}
}

// setOption("switchThermPort", "TRUE");

/////////////////////////////////////////////////////
//
//               Steady-State Runs
//
////////////////////////////////////////////////////

linkPorts("fs_coolant.Fl_O","thermal_duct.Fl_I", "FC1");
linkPorts("thermal_duct.Fl_O","volume.Fl_I", "FC2");
linkPorts("volume.Fl_O","HEX.Fl_I1", "FC3");
linkPorts("HEX.Fl_O1","fe_coolant.Fl_I", "FC4");

linkPorts("fs_air.Fl_O","HEX.Fl_I2", "FC11");
linkPorts("HEX.Fl_O2","fe_air.Fl_I", "FC12");

linkPorts("thermal_duct.Q_O", "Load.Q_I", "Q1");

solverSequence = { "fs_air", "fs_coolant", "thermal_duct", "Load" , "volume", "HEX", "fs_air", "fe_coolant" };
autoSolverSetup();
solver.addIndependent("ind_Tbal");
solver.addDependent("dep_Tbal");
setOption("switchDes", "DESIGN");

Table TB_Q( real time ){
    time = { 0.,9.99, 10, 15 }
    Q = { 0, 0, 10, 10 }
}

// solver.addIndependent( "ind_T" );
// solver.addDependent( "dep_T" );
cout << solverSequence << endl;
cout << endl << solver.dependentNames << endl << solver.independentNames << endl;
// cout<< thermal_duct.Q_O.list("Variable",TRUE)<<endl;

cout<<"---------Run Design--------------"<<endl;
run();

cout << "FS_T_coolant = " << (fs_coolant.Fl_O.Tt) << endl;
cout << "thermal_duct_T_coolant_out = " << (thermal_duct.Fl_O.Tt) << endl;
cout << "volume_T_coolant_out = " << (volume.Fl_O.Tt) << endl;
cout << "HEX_T_coolant_out = " << (HEX.Fl_O1.Tt) << endl;

cout << "FS_P_coolant = " << (fs_coolant.Fl_O.Pt) << endl;
cout << "volume_P_coolant_out = " << (volume.Fl_I.Pt) << endl;

cout << "volume_Vol_coolant = " << (volume.mass) << endl;

cout << "thermal_duct_W_coolant = " << (thermal_duct.Fl_O.W) << endl;
cout << "volume_W_coolant = " << (volume.Fl_O.W) << endl;
cout << "HEX_W_coolant = " << (HEX.Fl_O1.W) << endl;


cout << "Q_net = " << (Load.Q_net) << endl;

/////////////////////////////////////////////////////
//
//               Transient Runs
//
////////////////////////////////////////////////////

int trans_enable = TRUE;

if (trans_enable==TRUE){
  solver.defaultDxLimit = 0.001;
  solver.maxIterations=300;
  solver.maxJacobians=300;
  setOption("switchDes","OFFDESIGN");

  setOption( "solutionMode", "TRANSIENT");
  cout<< Load.solutionMode<<endl;
  transient.stopTime = 15;
  transient.baseTimeStep = 0.1;
  transient.setup();
  Load.Q_in = 20;
  // volume.S_Q.T = 540;
  autoSolverSetup();
  solver.addIndependent("ind_Tbal");
  solver.addDependent("dep_Tbal");

  cout << endl << solver.dependentNames << endl << solver.independentNames << endl;

  // Transient data out to a CSV file for plotting
  OutFileStream transientCSVStream { filename = "Thermal_transient.csv"; }

  // Write the CSV headers
  transientCSVStream << "time,";
  transientCSVStream << "T_coolant in,";
  transientCSVStream << "T_Load out,";
  transientCSVStream << "T_volume out,";
  transientCSVStream << "T_HEX out,";
  transientCSVStream << "AU,";
  transientCSVStream << "effectiveness,"<< endl;


  void csvTransientPrint()
  {
      transientCSVStream << time << ", ";
      transientCSVStream << fs_coolant.Fl_O.Tt << ", ";
      transientCSVStream << thermal_duct.Fl_O.Tt << ", ";
      transientCSVStream << volume.Fl_O.Tt << ", ";
      transientCSVStream << HEX.Fl_O1.Tt << ", ";
      transientCSVStream << HEX.AU << ", ";
      transientCSVStream << HEX.effect << endl;


      cout << "time, "  << time<< ", ";
      cout << "T_in, "  << fs_coolant.Fl_O.Tt << ", ";
      cout << "T_load, "<< thermal_duct.Fl_O.Tt << ", ";
      cout << "T_vol, " << volume.Fl_O.Tt << ", ";
      cout << "T_HEX, " << HEX.Fl_O1.Tt << ", ";
      cout << "Vol_Tank, " << volume.mass << endl;

  }

  postsolverSequence = { "csvTransientPrint" };
  run();

}
