MODELNAME = "Thermal Duct Tester";
// setThermoPackage("FPT");
setThermoPackage("GasTbl");
#include "ThermalDuct.int"
#include "InterpretedPort.int"

solver.maxIterations = 20;
solver.maxJacobians = 20;

Independent ind_T {
  varName = "Load.T";
}

Dependent dep_T {
  eq_lhs = "Load.Q_in";
  eq_rhs = "TD.Q_dmd";
}

Element FlowStart fs_coolant{
 // Fl_O.comp = "Oil";
 Tt = 518.0;
 Pt = 14.504;
 W=1.0;
}

// Element Load{
//     ThermalInputPort Q_I;
//     // create("", "ThermalInputPort", "Q_I" );
//     // Assume cold side of TMS is ISA temperature
//     real Q_loss = 20, Q_in, Q_net, Q_out=30, Mass = 1, Cp = 1;
//     real T {
//       value = 500;  IOstatus = INPUT; units = RANKINE;
//       description = "Temperature";
//       trigger = 1;
//     }
//     real dTqdt {
//       value = 0;  IOstatus = OUTPUT;  units = PER_SEC;
//       description = "Temperature time derivative";
//     }
//
//     Independent ind_T {
//       varName = "T";
//       autoSetup = TRUE;
//       description = "Varies the material temperature";
//     }
//
//     Integrator integ_T {
//       stateName = "T";
//       derivativeName = "dTqdt";
//       eq_lhs = "Q_in";
//       eq_rhs = "Q_out";
//       tolerance = 0.01;
//       autoSetup = TRUE;
//       description = "Balances the heat flows";
//     }
//     void variableChanged( string name, any oldVal )
//     {
//       if ( name == "T" ) {
//         Q_I.MassTemp = T;
//       }
//     }
//     void calculate() {
//       Q_in  = Q_loss;
//       Q_out = Q_I.HeatTransferRate;
//       Q_net = Q_in - Q_out;
//       dTqdt = Q_net /( Mass*Cp );
//       cout<<"-----run Load -----------"<<endl;
//       cout<<"Q_net = Q_in - Q_out => "<<Q_net<< " = "<<Q_in<<"  - "<<Q_out<<endl;
//       // cout<<"dTqdt = "<<dTqdt<<" and T_load = "<<T<<endl;
//       cout<< "T_load = "<<T<<endl;
//     }
// }

Element ThermalLoad Load{
  Q_in = 20;
}

Element ThermalDuct TD{
  switchQ = "CALCULATE";
  // switchDP = "INPUT";
  dPqP_dmd = 0.01;
  Subelement ThermalQcalc S_Q {
      eff = 0.8;
      Volume = 100;
  }
}
setOption("switchThermPort", "TRUE");

Element FlowEnd fe_coolant{
	void postexecute(){
	  //cerr << "comp is " << Fl_I.comp << endl;
	}
}

linkPorts("fs_coolant.Fl_O","TD.Fl_I", "FC1");
linkPorts("TD.Fl_O","fe_coolant.Fl_I", "FC2");
linkPorts("TD.Q_O", "Load.Q_I", "Q1");

solverSequence = { "fs_coolant","TD", "Load" , "fe_coolant" };
autoSolverSetup();
setOption("switchDes", "DESIGN");

// solver.addIndependent( "ind_T" );
// solver.addDependent( "dep_T" );
cout << solverSequence << endl;
cout << endl << solver.dependentNames << endl << solver.independentNames << endl;
cout<< TD.Q_O.list("Variable",TRUE)<<endl;

run();

// Element AdvHeatExchanger HEx1{
//     HExTypeSide1="SFS";
//     HExTypeSide2="SFPFS";
//     width=0.32808399;
//     height=0.164041995;
//     length=0.32808399;
//     switchQ="CALCULATE";
//     switchQcalc="EFFECT";
//     stream2PhysProps="AIR";
//     stream1PhysProps="OIL";
// }




// linkPorts("hotOilIn.Fl_O","HEx1.Fl_I1", "FC1");
// linkPorts("HEx1.Fl_O1","hotOilOut.Fl_I","FC2");
// linkPorts("coldAirIn2.Fl_O","HEx1.Fl_I2","FH1");
// linkPorts("HEx1.Fl_O2","coldAirOut2.Fl_I","FH2");


//-----------------------------------
//AIR Tester
//-----------------------------------

cout << "FS_T_coolant = " << (fs_coolant.Fl_O.Tt) << endl;
cout << "FS_h_coolant = " << (fs_coolant.Fl_O.ht) << endl;
cout << "FS_P_coolant = " << (fs_coolant.Fl_O.Pt) << endl;
cout << "TD_T_coolant_out = " << (TD.Fl_O.Tt) << endl;
cout << "TD_P_coolant_out = " << (TD.Fl_O.Pt) << endl;
cout << "Q_net = " << (Load.Q_net) << endl;
// cout << "rho2_out = " << (HEx2.Fl_O2.rhot)<< endl;
//cout <<"Wt = "<< HEx2.HExWeight << endl;
