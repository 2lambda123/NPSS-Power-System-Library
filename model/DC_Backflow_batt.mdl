/***
 -------------------------------------------------------------------------------
 |                                                                             |
 | NASA Glenn Research Center                                                  |
 | 21000 Brookpark Rd 		                                                   |
 | Cleveland, OH 44135 	                                                       |
 |                                                                             |
 | File Name:     SW13.mdl                                                     |
 | Author(s):	  George Thomas, Brian Malone                   			   |
 | Date(s):       October 2020                                                 |
 |                                                                             |
 | Description:   DC model with backflow                                       |
 |             									                               |
 |                                                                             |
 -------------------------------------------------------------------------------
***/

cout<<"======================================="<<endl;
cout<<" MODEL WITH DC-DC CONVERTER AND BACKFLOW"<<endl;
cout<<"======================================="<<endl;

#ifdef THERMO
    cout << "THERMO" << endl;
    setThermoPackage("$THERMO");
#elseif
    cout << "GasTbl" << endl;
    setThermoPackage("GasTbl");
#endif

/**************************
Electric Power System Components
**************************/
Element Battery Li_ion_cell { //Amprius battery ELD214
    #include <amprius_cell.map>
}

Element Cable Cable_Single
{
	R = 0.001; //Ohms
	L = 0; //Henries
}


Element ConstantPowerLoad CLoad
{
    Pdemand  = 14./1000.; // kW (single cell 1 C current is 3.5 Amps, roughly 14 W)
    eff = 0.95;
}					



//-------------------------------------------------------------------------------------------------
// Component Linkages
//-------------------------------------------------------------------------------------------------
linkPortI( "Li_ion_cell.EP_O", "Cable_Single.EP_I" );
linkPortI( "Cable_Single.EP_O", "CLoad.EP_I" );
// linkPortI( "CableLeft.EP_O", "DeltaDC.EP_I" );
// linkPortI( "DeltaDC.EP_O", "CableRight.EP_I" );
// linkPortI( "CableRight.EP_O", "CLoad.EP_I" );

findSourcesAndPropagate();

solverSequence = { "Cable_Single", "Li_ion_cell", "CLoad" }; 

void BFPrintOutput() 
{
    cout << " Case = " << CASE << endl;
    cout << " Battery open circuit voltage          = " << Li_ion_cell.Voc << endl; 
    cout << " Battery output voltage (actual value) = " << Li_ion_cell.Vout << endl; 
    cout << " Battery output voltage (guess value)  = " << Li_ion_cell.Vout_guess << endl; 
    cout << " Battery output Resistance (R_0, R_Th) = " << Li_ion_cell.R_0 << ", " << Li_ion_cell.R_Th << endl; 
    cout << " Battery output voltage (guess value)  = " << Li_ion_cell.Vout_guess << endl; 
    cout << " Battery current (calc)                = " << (Li_ion_cell.Voc-Li_ion_cell.Vout)/Li_ion_cell.RTotal << endl;
    cout << " Battery current (output port)         = " << Li_ion_cell.EP_O.I.r << endl;
    cout << " Cable current (output port)           = " << Cable_Single.EP_O.I.r << endl;
    cout << " Load input voltage                    = " << CLoad.EP_I.V.r << endl;
    cout << " Load input power                      = " << CLoad.EP_I.S.r << endl;
    cout << " Calculated load eff                   = " << (CLoad.P/CLoad.EP_I.S.r)**sign(CLoad.P) << endl; // GLT: account for negative power flow
    cout << " Load eff                              = " << CLoad.eff << endl;
}

// Initial independent variable guesses are here.
CLoad.Vreal = 3;
CLoad.Vimag = 0;
